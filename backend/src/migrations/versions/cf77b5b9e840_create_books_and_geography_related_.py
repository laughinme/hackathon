"""create books and geography related tables

Revision ID: cf77b5b9e840
Revises: a3d5e3e246f2
Create Date: 2025-08-01 14:02:02.638532

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'cf77b5b9e840'
down_revision: Union[str, Sequence[str], None] = 'a3d5e3e246f2'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('authors',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('cities',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('genres',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('exchange_locations',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('city_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('latitude', sa.Float(), nullable=False),
    sa.Column('longitude', sa.Float(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['city_id'], ['cities.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('books',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('owner_id', sa.Uuid(), nullable=False),
    sa.Column('city_id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('extra_terms', sa.String(), nullable=True),
    sa.Column('author', sa.Integer(), nullable=False),
    sa.Column('genre', sa.Integer(), nullable=False),
    sa.Column('language', sa.String(length=2), nullable=False),
    sa.Column('pages', sa.Integer(), nullable=True),
    sa.Column('condition', postgresql.ENUM('NEW', 'PERFECT', 'GOOD', 'NORMAL', name='condition'), nullable=False),
    sa.Column('photo_urls', postgresql.ARRAY(sa.String(), dimensions=1), nullable=False),
    sa.Column('exchange_location_id', sa.Integer(), nullable=False),
    sa.Column('is_available', sa.Boolean(), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['author'], ['authors.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['city_id'], ['cities.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['exchange_location_id'], ['exchange_locations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['genre'], ['genres.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_books_city_id'), 'books', ['city_id'], unique=False)
    op.add_column('users', sa.Column('bio', sa.String(), nullable=True))
    op.add_column('users', sa.Column('favorite_genres', postgresql.ARRAY(sa.String(), dimensions=1), nullable=False))
    op.add_column('users', sa.Column('city_id', sa.Integer(), nullable=True))
    op.add_column('users', sa.Column('latitude', sa.Float(), nullable=True))
    op.add_column('users', sa.Column('longitude', sa.Float(), nullable=True))
    op.add_column('users', sa.Column('is_onboarded', sa.Boolean(), nullable=False))
    op.create_unique_constraint(None, 'users', ['email'])
    op.create_foreign_key(None, 'users', 'cities', ['city_id'], ['id'], ondelete='RESTRICT')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.drop_constraint(None, 'users', type_='unique')
    op.drop_column('users', 'is_onboarded')
    op.drop_column('users', 'longitude')
    op.drop_column('users', 'latitude')
    op.drop_column('users', 'city_id')
    op.drop_column('users', 'favorite_genres')
    op.drop_column('users', 'bio')
    op.drop_index(op.f('ix_books_city_id'), table_name='books')
    op.drop_table('books')
    op.drop_table('exchange_locations')
    op.drop_table('genres')
    op.drop_table('cities')
    op.drop_table('authors')
    # ### end Alembic commands ###
