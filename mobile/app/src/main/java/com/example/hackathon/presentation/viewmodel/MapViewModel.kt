package com.example.hackathon.presentation.viewmodel

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.hackathon.domain.model.ExchangeLocation
import com.example.hackathon.domain.model.Resource
import com.example.hackathon.domain.usecase.GetCitiesUseCase
import com.example.hackathon.domain.usecase.GetExchangeLocationsUseCase
import com.example.hackathon.domain.usecase.GetNearestExchangeLocationUseCase
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.onEach
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class MapViewModel @Inject constructor(
    private val getExchangeLocationsUseCase: GetExchangeLocationsUseCase,
    private val getNearestExchangeLocationUseCase: GetNearestExchangeLocationUseCase,
    private val getCitiesUseCase: GetCitiesUseCase
) : ViewModel() {
    init {
        Log.d("Nah I'd win", """"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
            ‚£æ‚°≥‚£º‚£Ü‚†Ä‚†Ä‚¢π‚°Ñ‚†π‚£∑‚£Ñ‚¢†‚†á‚†ª‚£∑‚£∂‚¢Ä‚£∏‚£ø‚°æ‚°è‚†Ä‚†∞‚£ø‚£∞‚†è‚†Ä‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚°Ä‚£Ä‚£Ä‚£Ä‚°π‚£ü‚°™‚¢ü‚£∑‚†¶‚†¨‚£ø‚£¶‚£å‚°ô‚†ø‚°Ü‚†ª‚°å‚†ø‚£¶‚£ø‚£ø‚£ø‚£ø‚£¶‚£ø‚°ø‚†ü‚†ö‚†â‚†Ä‚†â‚†≥‚£Ñ‚°Ä‚†Ä‚†Ä‚†Å‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ä‚¢Ä‚£º‚£ü‚†õ‚†õ‚†ô‚†õ‚†â‚†ª‚¢∂‚£Æ‚¢ø‚£Ø‚°ô‚¢∂‚°å‚†≤‚¢§‚°ë‚†Ä‚†à‚†õ‚†ü‚¢ø‚£ø‚†õ‚£ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚£Ü‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°∏‚†Ø‚£ô‚†õ‚¢â‚£â‚£ô‚£ø‚£ø‚°≥‚¢∂‚£¶‚£ù‚¢ø‚£Ü‚†â‚†ª‚£Ñ‚†à‚¢Ü‚¢µ‚°à‚†Ä‚†Ä‚¢∞‚°Ü‚†Ä‚£º‚†ì‚†Ä‚†Ä‚†Ä          Nah    ‚†Ä‚†Ä‚†à‚£∑‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†ñ‚†â‚†ª‚£ü‚°ø‚£ø‚£≠‚¢Ω‚£Ω‚£∂‚£à‚¢õ‚£æ‚£ø‚£ß‚†Ä‚†ô‚†ì‚†Ä‚†ë‚¢¶‚°Ä‚†π‚£ß‚¢Ç‚†Ä‚£ø‚°á‚¢Ä‚£ø‚†∫‚†á‚†Ä          ‚†ÄI'd‚†Ä          ‚†Ä‚£ø‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†ê‚†à‚†â‚¢õ‚£ø‚£ø‚£∂‚£§‚£à‚†â‚£∞‚£ó‚°à‚¢õ‚£á‚†Ä‚£µ‚°Ä‚†Ä‚†ò‚£ø‚°Ñ‚¢ª‚£§‚†Ä‚¢ª‚°á‚£º‚£ß‚£ø‚°Ñ‚†Ä‚†Ä         Win‚†Ä      ‚†Ä‚†Ä‚°ø‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£æ‚£ø‚¢ç‚°â‚†õ‚†ª‚£∑‚°Ü‚†®‚£ø‚£≠‚£§‚£ç‚†Ä‚¢π‚£∑‚°Ä‚†Ä‚†π‚£ø‚°Ñ‚†à‚†Ä‚¢ø‚†Å‚£ø‚£ø‚†è‚†Ä‚†Ä‚†Ä                        ‚†Ä‚†Ä‚†Ä‚£á‚†Ä‚†Ä
‚†Ä‚£ø‚£á‚£†‚£æ‚£ø‚£õ‚£≤‚£ø‚†õ‚†Ä‚†Ä‚¢Ä‚£∏‚£ø‚£ø‚£ü‚£Æ‚°ª‚£∑‚£§‚°ô‚¢ü‚°Ä‚†Ä‚†ô‚¢ß‚†Ä‚†Ä‚†é‚†Ä‚†â‚†Å‚†∞‚£ø‚†Ä‚†Ä                         ‚†Ä‚¢Ä‚°ø‚†Ä‚†Ä
‚†Ä‚†à‚¢ª‚£ø‚£ø‚£Ω‚£ø‚£ø‚£ø‚£¥‚°è‚†ö‚¢õ‚£à‚£ç‚†õ‚†õ‚†ø‚¢¶‚£å‚¢ô‚†ª‚°Ü‚†Å‚†Ä‚†Ä‚†Ä‚£¥‚£¶‚†Ä‚†Ä‚†Ä‚†ê‚¢≥‚¢ª‚£¶‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†Æ‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†à‚†ô‚£ø‚£ß‚£∂‚£ø‚†ø‚£ß‚£¥‚£ø‚¢ª‚°â‚†Ä‚¢Ä‚£†‚£¥‚£æ‚°ü‚†ø‚†É‚†Å‚£†‚£§‚°∂‚£æ‚°ü‚†Ö‚†Ä‚£Ä‚°Ñ‚†Ä‚£æ‚¢∏‚£ø‚£è‚¢ª‚¢∂‚£¶‚£§‚£§‚£Ñ‚¢∂‚£æ‚£ø‚£°‚£§‚°Ñ‚†Ä
‚†Ä‚†Ä‚£†‚£û‚£ã‚£ø‚£ø‚£æ‚£ø‚°ø‚°õ‚£π‚°ü‚£§‚¢∞‚°ø‚†ü‚†â‚£Ä‚£Ä‚£§‚£§‚°†‚†ô‚¢Å‚£æ‚°ø‚†Ç‚†Ä‚£ø‚†ü‚£Å‚†Ä‚£π‚†Ä‚£π‚£ø‚°ü‚£º‚£ø‚£ø‚£å‚£ø‚£û‚£ø‚£ø‚†Å‚†Ä‚†Ä‚†Ä
‚†Ä‚¢†‚°ø‚¢õ‚¢ü‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚£º‚£ø‚£ü‚¢ì‚†õ‚£ø‚£è‚£ø‚£µ‚£ó‚£µ‚£¥‚£ø‚¢ü‚°µ‚££‚£º‚£ø‚¢ü‚£µ‚£∂‚¢ª‚£∂‚£ø‚†Ä‚†Ä‚£à‚¢ª‚£ø‚£ø‚£ø‚¢ø‚£æ‚¢ø‚£ß‚†Ä‚†Ä‚†Ä
‚†Ä‚†ò‚†É‚¢∏‚£ø‚°æ‚£ø‚£ø‚£ø‚£ø‚£Ø‚£ø‚£ø‚£ø‚£∂‚£ø‚£ø‚£ü‚£æ‚°ø‚£´‚£ø‚£ø‚£ø‚£Ω‚£ø‚£ø‚£ø‚£ø‚¢´‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£¥‚°Ü‚£ª‚£ø‚°è‚£ø‚¢ª‚£ß‚£ø‚°ø‚£ø‚°Ü‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†ú‚£ø‚£æ‚¢ø‚£ø‚£ø‚£ø‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£≠‚£ø‚£ñ‚£ø‚¢ø‚£ø‚°ø‚£ø‚£ø‚£ø‚°ø‚¢°‚¢Ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚°ø‚£æ‚£∑‚£ø‚£ø‚¢ø‚£ø‚°á‚†â‚†Å‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£•‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚£≠‚£ø‚£ø‚£ø‚£ø‚†É‚†û‚†ü‚£∏‚£ø‚†è‚£∏‚£ß‚£Ä‚†ø‚¢ø‚£ø‚£ø‚£ü‚£ø‚£ø‚£ø‚£ø‚£Ω‚£ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†à‚†õ‚£π‚£ø‚£ø‚£ø‚£ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ü‚£ø‚£ø‚°ø‚¢∂‚£¶‚£Ñ‚£ø‚†è‚†Ä‚£ø‚£ü‚£ø‚£∂‚†æ‚£ø‚£ü‚£ã‚£õ‚£ø‚£ø‚£ø‚£ø‚°á‚£ª‚£ø‚£ø‚£ø‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†ü‚†õ‚†´‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚£ß‚†õ‚£ø‚†õ‚£ø‚£ø‚£ø‚£∑‚°å‚†π‚°ü‚†Ä‚†Ä‚†â‚°ü‚†ã‚¢†‚£æ‚£ø‚£ø‚£ø‚°ü‚£ø‚£ø‚£ø‚£ø‚¢Ä‚£ø‚£ø‚£ø‚£ø‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†ã‚£æ‚£∑‚£ø‚£ø‚£ß‚†ô‚†Ä‚†ô‚¢£‚†ù‚†õ‚†ã‚£Ω‚£∑‚¢¶‚†á‚†Ä‚†Ä‚†ò‚†Å‚£§‚£æ‚£ø‚†ù‚†õ‚†â‚†ò‚¢ª‚£ø‚£ø‚¢ø‚£º‚£∑‚°ü‚¢ª‚£∑‚†â‚†Ä‚°Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ê‚†ü‚¢ª‚£ø‚£ø‚£ø‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†õ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚†ü‚†Ä‚¢∏‚£∑‚£ø‚°á‚†Ä‚†õ‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†õ‚†Å‚†Ä‚¢π‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚£ø‚£ø‚°ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£æ‚¢ª‚°ø‚†à‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†≤‚£Ñ‚†Ä‚°Ñ‚†Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£ø‚£∑‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚†Ä‚†Ä‚£†‚£æ‚£ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚¢ª‚£Ü‚†Ä‚†õ‚†Å‚†∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚°∂‚†Ü‚†ò‚†ã‚£†‚°æ‚¢´‚£æ‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ê‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚†õ‚†Ä‚†ô‚£∑‚°Ä‚†Ä‚†Ä‚†ô‚†õ‚†õ‚†õ‚†õ‚†ã‚†Å‚†Ä‚¢Ä‚£¥‚†ã‚†Ä‚£æ‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£ø‚£∞‚£¶‚°Ä‚†∏‚£ø‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚°ü‚†Å‚†Ä‚†ê‚¢ª‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£¥‚£æ‚£ø‚£ø‚£ø‚°Ñ‚¢∫‚£ø‚°Ñ‚†π‚£ø‚†ª‚¢¶‚£§‚£§‚£§‚£§‚£∂‚£ø‚°ü‚¢Ä‚£Ä‚†Ä‚†Ä‚¢∏‚£ø‚£¶‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£¥‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Æ‚£ø‚£ø‚°Ä‚†π‚°∑‚£¶‚£Ä‚°Ä‚°Ä‚¢∏‚£ø‚†è‚¢†‚£æ‚£ø‚†Ä‚†Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚£∂‚£Ñ‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚£Ä‚£§‚£¥‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚†Ä‚†ò‚£∑‚£ª‚°ü‚†Ä‚°º‚†Å‚£¥‚£ø‚£ø‚£Ø‚£•‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£§‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£Ø‚£ø‚£§‚£§‚£§‚£¨‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£§‚£Ñ
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ü§ûü§ûüèª""")
        loadPoints()
    }
    val scope = viewModelScope
    private val _exchabgePoints = MutableStateFlow<List<ExchangeLocation>>(emptyList())
    val exchangePoints = _exchabgePoints.asStateFlow()

    private val _isLoading = MutableStateFlow(false)
    val isLoading = _isLoading.asStateFlow()

    private val _errorMessage = MutableStateFlow<String?>(null)

    private fun loadPoints() {
        scope.launch {
            _isLoading.value = true
            _errorMessage.value = null

            getExchangeLocationsUseCase().collect { result ->
                when (result) {
                    is Resource.Success -> {
                        _exchabgePoints.value = result.data!!
                        _isLoading.value = false
                    }
                    is Resource.Error -> {
                        _errorMessage.value = result.message
                    }
                    is Resource.Loading -> {
                        _isLoading.value = true
                    }
                }
            }
        }

    }
}